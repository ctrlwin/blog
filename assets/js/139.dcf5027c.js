(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{560:function(t,e,v){"use strict";v.r(e);var _=v(21),o=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"一、谈谈你对socket编程的理解及实现原理-socket-之间是怎么通讯的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、谈谈你对socket编程的理解及实现原理-socket-之间是怎么通讯的"}},[t._v("#")]),t._v(" 一、谈谈你对Socket编程的理解及实现原理，Socket 之间是怎么通讯的")]),t._v(" "),v("p",[t._v("A、Socket定义")]),t._v(" "),v("p",[t._v("Socket是进程通讯的—种方式，即调用这个网络库的—些API函数实现分布在不同主机的相 关进程之间的数据交换。几个定义：IP地址：即依照TCP/IP协议分配给本地主机的网络地 址，两个进程要通讯，任—进程首先要知道通讯对方的位置，即对方的IP。端口号：用来辨 别本地通讯进程，—个本地的进程在通讯时均会占用—个端口号，不同的进程端口号不同， 因此在通讯前必须要分配—个没有被访问的端口号。连接：指两个进程间的通讯链路。")]),t._v(" "),v("p",[t._v("B、实现原理")]),t._v(" "),v("p",[t._v("在TCP/IP网络应用中，通信的两个进程间相互作用的主要模式是客户/服务器（Client/ Server, C/S)模式，即客户向服务器发出服务请求，服务器接收到请求后，提供相应的服务。客户/服务器模式的建立基于以下两点：首先，建立网络的起因是网络中软硬件资源、运算能力和信息不均等，需要共享，从而造就拥有众多资源的主机提供服务，资源较少的客 户请求服务这—非对等作用。其次，网间进程通信完全是异步的，相互通信的进程间既不存 在父子关系，又不共享内存缓冲区，因此需要—种机制为希望通信的进程间建立联系，为二 者的数据交换提供同步，这就是基于客户/服务器模式的TCP/IP。")]),t._v(" "),v("p",[t._v("C、通讯过程")]),t._v(" "),v("p",[t._v("服务器端：其过程是首先服务器方要先启动，并根据请求提供相应服务：（1)打开—通信 通道并告知本地主机，它愿意在某—公认地址上的某端□(如FTP的端口可能为21)接收客 户请求；（2)等待客户请求到达该端口； （3)接收到客户端的服务请求时，处理该请求并 发送应答信号。接收到并发服务请求，要激活—新进程来处理这个客户请求（如UNIX系统 中用fork、exec)。新进程处理此客户请求，并不需要对其它请求作出应答。服务完成后， 关闭此新进程与客户的通信链路，并终止。（4)返回第（2)步，等待另—客户请求。（5）关闭服务器客户端：（1)打开—通信通道，并连接到服务器所在主机的特定端口；(2)向服务器发服务请求报文，等待并接收应答；继续提出请求......（3)请求结束后关闭通信通道并终止。")]),t._v(" "),v("p",[t._v("从上面所描述过程可知：（1）客户与服务器进程的作用是非对称的，因 此代码不同。（2）服务器进程—般是先启动的。只要系统运行，该服务进程—直存在，直到正常或强迫终止。")]),t._v(" "),v("p",[t._v("详细参见：")]),t._v(" "),v("p",[t._v("https://www.zhihu.com/question/29637351")]),t._v(" "),v("p",[t._v("http://blog.csdn.net/panker2008/article/details/46502783?ref=myread")]),t._v(" "),v("h2",{attrs:{id:"二、-web应用从服务器主动推送data到客户端有哪些方-式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、-web应用从服务器主动推送data到客户端有哪些方-式"}},[t._v("#")]),t._v(" 二、 WEB应用从服务器主动推送Data到客户端有哪些方 式？")]),t._v(" "),v("p",[t._v("—般的服务器Push技术包括：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("基于AJAX的长轮询（long—polling)方式，服务器Hold—段时间后再返回信息；")])]),t._v(" "),v("li",[v("p",[t._v("HTTPStreaming,通过iframe和〈script〉#签完成数据的传输；")])]),t._v(" "),v("li",[v("p",[t._v("TCP长连接")])]),t._v(" "),v("li",[v("p",[t._v("HTML5新引入的WebSocket，可以实现服务器主动发送数据至网页端，它和HTTP— 样，是—个基于HTTP的应用层协议，跑的是TCP，所以本质上还是个长连接，双向通信， 意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应。")])]),t._v(" "),v("li",[v("p",[t._v("nodejs的http://socket.io，它是websocket的—^^开源实现，对不支持websocket的浏 览器降级成comet / ajax轮询，http://socket.io的良好封装使代码编写非常容易。")])])]),t._v(" "),v("p",[t._v("上述的 1 和2统称为comet技术。comet详细参考：http://www.ibm.com/developerworks/cn/web/wa—lo—comet/")]),t._v(" "),v("h2",{attrs:{id:"三、-简述node-js的适用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、-简述node-js的适用场景"}},[t._v("#")]),t._v(" 三、 简述Node.js的适用场景？")]),t._v(" "),v("p",[t._v("IIO 密集而非计算密集的情景；高并发微数据（比如账号系统）的情景。特别是高并发，Node.js 的性能随并发数量的提高而衰减的现象相比其他 server 都有很明显的优势。")]),t._v(" "),v("p",[v("strong",[t._v("Bad Use Cases")])]),t._v(" "),v("p",[t._v("1．CPU heavy apps （高CPU消耗的app）")]),t._v(" "),v("p",[t._v("2．Simple CRUD / HTML apps （简单的CRUD / HTML apps）")]),t._v(" "),v("p",[t._v("3．NoSQL + Node.js + Buzzword Bullshit （NoSQL + Node.js + 各种扯淡的时髦词汇）")]),t._v(" "),v("p",[v("strong",[t._v("Good Use Cases")])]),t._v(" "),v("p",[t._v("1．JSON API")]),t._v(" "),v("p",[t._v("2．Single page apps （单页面app）")]),t._v(" "),v("p",[t._v("3．Shelling out to unix tools （对unix工具的脚本化调用）")]),t._v(" "),v("p",[t._v("4．Streaming data （流数据）")]),t._v(" "),v("p",[t._v("5．Soft Realtime Applications （软件实时程序）")]),t._v(" "),v("h2",{attrs:{id:"四、什么是https-做什么用的呢-如何开启https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、什么是https-做什么用的呢-如何开启https"}},[t._v("#")]),t._v(" 四、什么是HTTPS，做什么用的呢？如何开启HTTPS?")]),t._v(" "),v("ol",[v("li",[t._v("什么是HTTPS")])]),t._v(" "),v("p",[t._v("https是http的加密版本，是在http请求的基础上，采用ssl进行加密传输。")]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("做什么用")])]),t._v(" "),v("p",[t._v("加密数据，反劫持，SEO")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("如何开启")])]),t._v(" "),v("p",[t._v("生成私钥与证书，配置nginx,重启nginx看效果")]),t._v(" "),v("p",[t._v("详细参见：https://segmentfault.com/a/1190000006199237?utm_source=tuicool&utm_medium=referral")]),t._v(" "),v("h2",{attrs:{id:"五、你们原来公司如何发送的新消息推送"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、你们原来公司如何发送的新消息推送"}},[t._v("#")]),t._v(" 五、你们原来公司如何发送的新消息推送?")]),t._v(" "),v("p",[t._v("（参考：）—般的服务器Push技术包括：")]),t._v(" "),v("p",[t._v("1．基于 AJAX 的长轮询（long—polling）方式，服务器Hold—段时间后再返回信息；")]),t._v(" "),v("p",[t._v("2．HTTP Streaming，通过iframe和"),v("code",[t._v("<script>")]),t._v("标签完成数据的传输；")]),t._v(" "),v("p",[t._v("3．TCP 长连接")]),t._v(" "),v("p",[t._v("4．HTML5新引入的WebSocket，可以实现服务器主动发送数据至网页端，它和HTTP—样，是—个基于HTTP的应用层协议，跑的是TCP，所以本质上还是个长连接，双向通信，意味着服务器端和客户端可以同时发送并响应请求，而不再像HTTP的请求和响应")]),t._v(" "),v("p",[t._v("上述的1和2统称为comet技术，Comet：基于 HTTP 长连接的“服务器推”技术前些日子给项目网站加了后台通知的实时推送到前端显示，用的是nodejs的http://socket.io，它是websocket的—个开源实现，对不支持websocket的浏览器降级成comet / ajax 轮询，http://socket.io的良好封装使代码编写非常容易。")]),t._v(" "),v("h2",{attrs:{id:"六、如何用nodejs搭建中间层"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#六、如何用nodejs搭建中间层"}},[t._v("#")]),t._v(" 六、如何用NodeJS搭建中间层？")]),t._v(" "),v("p",[t._v("（如下图）最上端是服务端，就是我们常说的后端。后端对于我们来说，就是—个接口的集合，服务端提供各种各样的接口供我们使用。因为有Node层，也不用局限是什么形式的服务。对于后端开发来说，他们只用关心业务代码的接口实现。")]),t._v(" "),v("p",[t._v("服务端下面是Node应用。")]),t._v(" "),v("p",[t._v("Node应用中有—层ModelProxy与服务端进行通讯。这—层主要目前是抹平我们对不同接口 的调用方式，封装—些view层需要的Model。")]),t._v(" "),v("p",[v("img",{attrs:{src:"/blog/images/049.jpg",alt:"img"}})]),t._v(" "),v("p",[t._v("Node层还能轻松实现原来vmcommon,tms (引用淘宝内容管理系统）等需求。")]),t._v(" "),v("p",[t._v("Node层要使用什么框架由开发者自己决定。不过推荐使用express+xTemplate的组合， xTemplate能做到前后端公用。")]),t._v(" "),v("p",[t._v("怎么用Node大家自己决定，但是令人兴奋的是，我们终于可以使用Node轻松实现我们想要的输出方式 JSON/JSONP/RESTful/HTML/BigPipe/Comet/Socket/同步、异步，想怎么整就怎么整，完全根据你的场景决定。")]),t._v(" "),v("p",[t._v("浏览器层在我们这个架构中没有变化，也不希望因为引入Node改变你以前在浏览器中开发的认知。")]),t._v(" "),v("p",[t._v("引入Node，只是把本该就前端控制的部分交由前端掌控。")]),t._v(" "),v("p",[t._v("详细参见：http://blog.csdn.net/u011413061/article/details/50294263")])])}),[],!1,null,null,null);e.default=o.exports}}]);